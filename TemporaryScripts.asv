%Temporary Scripts
clc; clear all; close all;
% 
% A = [1/2 1/2 -1/sqrt(2); -1/sqrt(2) 1/sqrt(2) 0; 1/2 1/2 1/sqrt(2)]
% 
% B = [1-sqrt(2) 1 0; 1 1+sqrt(2) 0; 0 0 -2]
% 
% C = [1/2 -1/sqrt(2) 1/2; 1/2 1/sqrt(2) 1/2; -1/sqrt(2) 0 1/sqrt(2)]
% 
% 
% F = tf([1], [1 10 24 0])
% % allmargin(tf)
% rlocus(F)
% 
% z=0.504;
% sgrid(z,0);
% 
% 
% % Data
% x_values = [45, 41, 37, 33, 29, 25, 21, 17, 13, 9];  % distance in cm
% y_values = [2500, 2270, 2030, 1800, 1590, 1380, 1110, 890, 730, 550];  % duration in microseconds
% 
% % Plot the data points
% figure;
% scatter(x_values, y_values, 'b', 'filled');
% hold on;
% 
% % Fit a line to the data
% p = polyfit(x_values, y_values, 1);
% y_fit = polyval(p, x_values);
% 
% % Plot the line of best fit
% plot(x_values, y_fit, 'r-', 'LineWidth', 1.5);
% 
% % Labels and title
% xlabel('Distance (cm)');
% ylabel('Duration (μs)');
% 
% grid on;
% 
% 
% 
% % Speed of sound calculation
% speed_of_sound_exp = 1 / p(1) * 10000;  % converting from cm/μs to m/s
% speed_of_sound_theoretical = 343;  % theoretical speed of sound in air at 20°C in m/s
% 
% % Comparison
% fprintf('Experimental Speed of Sound: %.2f m/s\n', speed_of_sound_exp);
% fprintf('Theoretical Speed of Sound: %.2f m/s\n', speed_of_sound_theoretical);
% fprintf('Difference: %.2f m/s\n', abs(speed_of_sound_exp - speed_of_sound_theoretical));
% 
% hold off;

% % Define symbolic variables
% syms P b L E w h real
% 
% % Moment of inertia
% I = (1/12) * w * h^3;
% 
% % Deflection formula
% Vmax = (P * b * (L^2 - b^2)^(3/2)) / (9 * sqrt(3) * E * I * L);
% 
% % Derivatives
% dVmax_dP = diff(Vmax, P);
% dVmax_db = diff(Vmax, b);
% dVmax_dL = diff(Vmax, L);
% dVmax_dE = diff(Vmax, E);
% dVmax_dw = diff(Vmax, w);
% dVmax_dh = diff(Vmax, h);
% 
% % Display the symbolic derivatives
% disp('dVmax/dP:');
% pretty(dVmax_dP)
% 
% disp('dVmax/db:');
% pretty(dVmax_db)
% 
% disp('dVmax/dL:');
% pretty(dVmax_dL)
% 
% disp('dVmax/dE:');
% pretty(dVmax_dE)
% 
% disp('dVmax/dw:');
% pretty(dVmax_dw)
% 
% disp('dVmax/dh:');
% pretty(dVmax_dh)
% 
% % Given values with uncertainties
% L_val = 1;         % m
% delta_L = 0.01;    % m
% w_val = 0.05;      % m (5 cm)
% delta_w = 0.002;   % m (0.2 cm)
% h_val = 0.03;      % m (3 cm)
% delta_h = 0.002;   % m (0.2 cm)
% E_val = 107e9;     % Pa (107 GPa)
% delta_E = 5e9;     % Pa (5 GPa)
% P_val = 6000;      % N (6 kN)
% delta_P = 2000;    % N (2 kN)
% b_val = 0.3;       % m
% delta_b = 0.1;     % m
% 
% % Recalculate I with nominal values
% I_val = (1/12) * w_val * h_val^3;
% 
% % Nominal value of maximum deflection Vmax
% Vmax_nominal = (P_val * b_val * (L_val^2 - b_val^2)^(3/2)) / (9 * sqrt(3) * E_val * I_val * L_val);
% 
% % Evaluate each derivative numerically
% dVmax_dP_num = double(subs(dVmax_dP, {P, b, L, E, w, h}, {P_val, b_val, L_val, E_val, w_val, h_val}));
% dVmax_db_num = double(subs(dVmax_db, {P, b, L, E, w, h}, {P_val, b_val, L_val, E_val, w_val, h_val}));
% dVmax_dL_num = double(subs(dVmax_dL, {P, b, L, E, w, h}, {P_val, b_val, L_val, E_val, w_val, h_val}));
% dVmax_dE_num = double(subs(dVmax_dE, {P, b, L, E, w, h}, {P_val, b_val, L_val, E_val, w_val, h_val}));
% dVmax_dw_num = double(subs(dVmax_dw, {P, b, L, E, w, h}, {P_val, b_val, L_val, E_val, w_val, h_val}));
% dVmax_dh_num = double(subs(dVmax_dh, {P, b, L, E, w, h}, {P_val, b_val, L_val, E_val, w_val, h_val}));
% 
% % Print numerical results
% fprintf('dVmax/dP = %.6e\n', dVmax_dP_num);
% fprintf('dVmax/db = %.6e\n', dVmax_db_num);
% fprintf('dVmax/dL = %.6e\n', dVmax_dL_num);
% fprintf('dVmax/dE = %.6e\n', dVmax_dE_num);
% fprintf('dVmax/dw = %.6e\n', dVmax_dw_num);
% fprintf('dVmax/dh = %.6e\n', dVmax_dh_num);
% 
% % Error propagation calculation
% delta_Vmax = sqrt((dVmax_dP_num * delta_P)^2 + ...
%                   (dVmax_db_num * delta_b)^2 + ...
%                   (dVmax_dL_num * delta_L)^2 + ...
%                   (dVmax_dE_num * delta_E)^2 + ...
%                   (dVmax_dw_num * delta_w)^2 + ...
%                   (dVmax_dh_num * delta_h)^2);
% 
% % Print final result
% fprintf('Nominal Maximum Deflection: %.6e m\n', Vmax_nominal);
% fprintf('Uncertainty in Maximum Deflection: %.6e m\n', delta_Vmax);
% 
% 
% 
% MATLAB Script to Symbolically and Numerically Solve for Maximum Concentration Time

% Clear previous variables and close figures
clear; clc; close all;

% Define symbolic variables for distance (x), time (t), and constants
syms x t M D U L A

% Define the Gaussian concentration function C(x, t)
C = (M / (A*sqrt(4 * pi * D * t))) * exp(-(x - U * t)^2 / (4 * D * t));

% Compute the derivative of C with respect to t
dC_dt = diff(C, t);
dC_dt2 = diff(diff(C, t);
% Display the derivative
disp('Time derivative of concentration, dC/dt:');
pretty(dC_dt);

% Solve dC/dt = 0 to find the time t that maximizes C at x = L
t_max_sol = solve(subs(dC_dt, x, L) == 0, t);

% Display the symbolic solution for the maximum concentration time
disp('Symbolic solution for the time at which concentration is maximized:');
disp(t_max_sol);

% Substitute numerical values for the parameters
M_val = 10;        % kg of contaminant
D_val = 0.1;       % m^2/s, turbulent diffusivity
U_val = 0.007;     % m/s, flow velocity
L_val = 100;       % m, distance to hatchery
A_val = 20;        %m^2, cross sectional area

% Substitute values into the symbolic solution and evaluate numerically
t_max_num = double(subs(t_max_sol, [M, D, U, L, A], [M_val, D_val, U_val, L_val, A_val]));

% Display the numerical result for the time of maximum concentration
disp('Numerical value for the time at which concentration is maximized (s):');
disp(t_max_num);

% Compute the maximum concentration at the time t = t_max_num
C_max_num = double(subs(C, {x, t, M, D, U, L, A}, {L_val, t_max_num, M_val, D_val, U_val, L_val, A_val}));

% Display the numerical result for the maximum concentration
disp('Numerical value for the maximum concentration (kg/m^3):');
disp(C_max_num);


